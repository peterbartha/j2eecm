/**
 */
package components.provider;

import components.util.ComponentsAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ComponentsItemProviderAdapterFactory extends ComponentsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComponentsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link components.Model} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelItemProvider modelItemProvider;

	/**
	 * This creates an adapter for a {@link components.Model}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelAdapter() {
		if (modelItemProvider == null) {
			modelItemProvider = new ModelItemProvider(this);
		}

		return modelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link components.Client} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClientItemProvider clientItemProvider;

	/**
	 * This creates an adapter for a {@link components.Client}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClientAdapter() {
		if (clientItemProvider == null) {
			clientItemProvider = new ClientItemProvider(this);
		}

		return clientItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link components.J2EEServer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected J2EEServerItemProvider j2EEServerItemProvider;

	/**
	 * This creates an adapter for a {@link components.J2EEServer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJ2EEServerAdapter() {
		if (j2EEServerItemProvider == null) {
			j2EEServerItemProvider = new J2EEServerItemProvider(this);
		}

		return j2EEServerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link components.Database} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatabaseItemProvider databaseItemProvider;

	/**
	 * This creates an adapter for a {@link components.Database}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatabaseAdapter() {
		if (databaseItemProvider == null) {
			databaseItemProvider = new DatabaseItemProvider(this);
		}

		return databaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link components.Browser} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BrowserItemProvider browserItemProvider;

	/**
	 * This creates an adapter for a {@link components.Browser}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBrowserAdapter() {
		if (browserItemProvider == null) {
			browserItemProvider = new BrowserItemProvider(this);
		}

		return browserItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link components.ApplicationClient} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationClientItemProvider applicationClientItemProvider;

	/**
	 * This creates an adapter for a {@link components.ApplicationClient}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationClientAdapter() {
		if (applicationClientItemProvider == null) {
			applicationClientItemProvider = new ApplicationClientItemProvider(this);
		}

		return applicationClientItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link components.WebContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WebContainerItemProvider webContainerItemProvider;

	/**
	 * This creates an adapter for a {@link components.WebContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWebContainerAdapter() {
		if (webContainerItemProvider == null) {
			webContainerItemProvider = new WebContainerItemProvider(this);
		}

		return webContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link components.EJBContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EJBContainerItemProvider ejbContainerItemProvider;

	/**
	 * This creates an adapter for a {@link components.EJBContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEJBContainerAdapter() {
		if (ejbContainerItemProvider == null) {
			ejbContainerItemProvider = new EJBContainerItemProvider(this);
		}

		return ejbContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link components.EntityBean} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityBeanItemProvider entityBeanItemProvider;

	/**
	 * This creates an adapter for a {@link components.EntityBean}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityBeanAdapter() {
		if (entityBeanItemProvider == null) {
			entityBeanItemProvider = new EntityBeanItemProvider(this);
		}

		return entityBeanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link components.MessageDrivenBean} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MessageDrivenBeanItemProvider messageDrivenBeanItemProvider;

	/**
	 * This creates an adapter for a {@link components.MessageDrivenBean}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMessageDrivenBeanAdapter() {
		if (messageDrivenBeanItemProvider == null) {
			messageDrivenBeanItemProvider = new MessageDrivenBeanItemProvider(this);
		}

		return messageDrivenBeanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link components.StatelessSessionBean} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatelessSessionBeanItemProvider statelessSessionBeanItemProvider;

	/**
	 * This creates an adapter for a {@link components.StatelessSessionBean}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatelessSessionBeanAdapter() {
		if (statelessSessionBeanItemProvider == null) {
			statelessSessionBeanItemProvider = new StatelessSessionBeanItemProvider(this);
		}

		return statelessSessionBeanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link components.StatefulSessionBean} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatefulSessionBeanItemProvider statefulSessionBeanItemProvider;

	/**
	 * This creates an adapter for a {@link components.StatefulSessionBean}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatefulSessionBeanAdapter() {
		if (statefulSessionBeanItemProvider == null) {
			statefulSessionBeanItemProvider = new StatefulSessionBeanItemProvider(this);
		}

		return statefulSessionBeanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link components.Servlet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServletItemProvider servletItemProvider;

	/**
	 * This creates an adapter for a {@link components.Servlet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServletAdapter() {
		if (servletItemProvider == null) {
			servletItemProvider = new ServletItemProvider(this);
		}

		return servletItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link components.JSPPage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JSPPageItemProvider jspPageItemProvider;

	/**
	 * This creates an adapter for a {@link components.JSPPage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJSPPageAdapter() {
		if (jspPageItemProvider == null) {
			jspPageItemProvider = new JSPPageItemProvider(this);
		}

		return jspPageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link components.ContainerReleationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContainerReleationshipItemProvider containerReleationshipItemProvider;

	/**
	 * This creates an adapter for a {@link components.ContainerReleationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContainerReleationshipAdapter() {
		if (containerReleationshipItemProvider == null) {
			containerReleationshipItemProvider = new ContainerReleationshipItemProvider(this);
		}

		return containerReleationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link components.WebReleationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WebReleationshipItemProvider webReleationshipItemProvider;

	/**
	 * This creates an adapter for a {@link components.WebReleationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWebReleationshipAdapter() {
		if (webReleationshipItemProvider == null) {
			webReleationshipItemProvider = new WebReleationshipItemProvider(this);
		}

		return webReleationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link components.AppReleationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AppReleationshipItemProvider appReleationshipItemProvider;

	/**
	 * This creates an adapter for a {@link components.AppReleationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAppReleationshipAdapter() {
		if (appReleationshipItemProvider == null) {
			appReleationshipItemProvider = new AppReleationshipItemProvider(this);
		}

		return appReleationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link components.DataReleationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataReleationshipItemProvider dataReleationshipItemProvider;

	/**
	 * This creates an adapter for a {@link components.DataReleationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataReleationshipAdapter() {
		if (dataReleationshipItemProvider == null) {
			dataReleationshipItemProvider = new DataReleationshipItemProvider(this);
		}

		return dataReleationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link components.ClassElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassElementItemProvider classElementItemProvider;

	/**
	 * This creates an adapter for a {@link components.ClassElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassElementAdapter() {
		if (classElementItemProvider == null) {
			classElementItemProvider = new ClassElementItemProvider(this);
		}

		return classElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link components.Operation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationItemProvider operationItemProvider;

	/**
	 * This creates an adapter for a {@link components.Operation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationAdapter() {
		if (operationItemProvider == null) {
			operationItemProvider = new OperationItemProvider(this);
		}

		return operationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link components.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This creates an adapter for a {@link components.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter() {
		if (propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link components.Association} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssociationItemProvider associationItemProvider;

	/**
	 * This creates an adapter for a {@link components.Association}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssociationAdapter() {
		if (associationItemProvider == null) {
			associationItemProvider = new AssociationItemProvider(this);
		}

		return associationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link components.PackageElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PackageElementItemProvider packageElementItemProvider;

	/**
	 * This creates an adapter for a {@link components.PackageElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPackageElementAdapter() {
		if (packageElementItemProvider == null) {
			packageElementItemProvider = new PackageElementItemProvider(this);
		}

		return packageElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link components.Generalization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GeneralizationItemProvider generalizationItemProvider;

	/**
	 * This creates an adapter for a {@link components.Generalization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGeneralizationAdapter() {
		if (generalizationItemProvider == null) {
			generalizationItemProvider = new GeneralizationItemProvider(this);
		}

		return generalizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link components.webModelRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected webModelRelationshipItemProvider webModelRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link components.webModelRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createwebModelRelationshipAdapter() {
		if (webModelRelationshipItemProvider == null) {
			webModelRelationshipItemProvider = new webModelRelationshipItemProvider(this);
		}

		return webModelRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link components.InterfaceElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterfaceElementItemProvider interfaceElementItemProvider;

	/**
	 * This creates an adapter for a {@link components.InterfaceElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterfaceElementAdapter() {
		if (interfaceElementItemProvider == null) {
			interfaceElementItemProvider = new InterfaceElementItemProvider(this);
		}

		return interfaceElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link components.Aggregation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AggregationItemProvider aggregationItemProvider;

	/**
	 * This creates an adapter for a {@link components.Aggregation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAggregationAdapter() {
		if (aggregationItemProvider == null) {
			aggregationItemProvider = new AggregationItemProvider(this);
		}

		return aggregationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link components.Realization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RealizationItemProvider realizationItemProvider;

	/**
	 * This creates an adapter for a {@link components.Realization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRealizationAdapter() {
		if (realizationItemProvider == null) {
			realizationItemProvider = new RealizationItemProvider(this);
		}

		return realizationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (modelItemProvider != null) modelItemProvider.dispose();
		if (clientItemProvider != null) clientItemProvider.dispose();
		if (j2EEServerItemProvider != null) j2EEServerItemProvider.dispose();
		if (databaseItemProvider != null) databaseItemProvider.dispose();
		if (browserItemProvider != null) browserItemProvider.dispose();
		if (applicationClientItemProvider != null) applicationClientItemProvider.dispose();
		if (webContainerItemProvider != null) webContainerItemProvider.dispose();
		if (ejbContainerItemProvider != null) ejbContainerItemProvider.dispose();
		if (entityBeanItemProvider != null) entityBeanItemProvider.dispose();
		if (messageDrivenBeanItemProvider != null) messageDrivenBeanItemProvider.dispose();
		if (statelessSessionBeanItemProvider != null) statelessSessionBeanItemProvider.dispose();
		if (statefulSessionBeanItemProvider != null) statefulSessionBeanItemProvider.dispose();
		if (servletItemProvider != null) servletItemProvider.dispose();
		if (jspPageItemProvider != null) jspPageItemProvider.dispose();
		if (containerReleationshipItemProvider != null) containerReleationshipItemProvider.dispose();
		if (webReleationshipItemProvider != null) webReleationshipItemProvider.dispose();
		if (appReleationshipItemProvider != null) appReleationshipItemProvider.dispose();
		if (dataReleationshipItemProvider != null) dataReleationshipItemProvider.dispose();
		if (classElementItemProvider != null) classElementItemProvider.dispose();
		if (operationItemProvider != null) operationItemProvider.dispose();
		if (propertyItemProvider != null) propertyItemProvider.dispose();
		if (associationItemProvider != null) associationItemProvider.dispose();
		if (packageElementItemProvider != null) packageElementItemProvider.dispose();
		if (generalizationItemProvider != null) generalizationItemProvider.dispose();
		if (webModelRelationshipItemProvider != null) webModelRelationshipItemProvider.dispose();
		if (interfaceElementItemProvider != null) interfaceElementItemProvider.dispose();
		if (aggregationItemProvider != null) aggregationItemProvider.dispose();
		if (realizationItemProvider != null) realizationItemProvider.dispose();
	}

}
